version: "3.9"

# Limites:
# CPU: 1.5
# MEM: 550MB

services:
  api01: &api
    build:
      context: ../../
      dockerfile: ./eng/docker/Dockerfile
      args:
        - PUBLISH_FOLDER=app/
    hostname: api01
    environment: &env
      ASPNETCORE_URLS: http://0.0.0.0:8080
      ConnectionStrings__Database: Host=db;Port=5432;Database=RinhaBackend;User Id=postgres;Password=123;Pooling=true;MinPoolSize=50;MaxPoolSize=150; Multiplexing=true;Timeout=15;Command Timeout=15;Cancellation Timeout=-1;No Reset On Close=true;Max Auto Prepare=20;Auto Prepare Min Usages=1;
      DOTNET_DiagnosticPorts: /app/diag/dotnet-monitor.sock
    ports:
      - "8080:8080"
    depends_on:
      - db
      - monitor
    volumes:
      - "/home/ftathiago/src/rinha-backend-2024-q1:/app/"
    entrypoint: [ "dotnet", "/app/src/RinhaBackend2024Q1.Api/bin/Debug/net8.0/RinhaBackend2024Q1.Api.dll" ]
    restart: on-failure
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "70MB"

  api02:
    <<: *api
    hostname: api02
    environment:
      <<: *env
      ASPNETCORE_URLS: http://*:8081
      DOTNET_DiagnosticPorts: ""
    ports:
      - "8081:8081"      

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api01
      - api02
    ports:
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: "0.15"
          memory: "60MB"
    ulimits:
      nofile:
        soft: 500000
        hard: 500000
  db:
    image: postgres:latest
    hostname: db
    environment:
      - POSTGRES_PASSWORD=123
      - POSTGRES_USER=postgres
      - POSTGRES_DB=RinhaBackend
    ports:
      - "5432:5432"
    volumes:
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5    
    deploy:
      resources:
        limits:
          cpus: "0.95"
          memory: "350MB"

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - "/home/ftathiago/src/rinha-backend-2024-q1/eng/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
      - "prometheus-data:/prometheus"
    healthcheck:
      test: ["CMD", "wget", "-c", "http://localhost:9090"]
      interval: 10s
      timeout: 15s
      retries: 10
      start_period: 40s

  monitor:
    image: mcr.microsoft.com/dotnet/monitor:8
    environment:
      DOTNETMONITOR_Storage__DefaultSharedPath: /diag
      DOTNETMONITOR_Metrics__Endpoints: http://+:52325
      DOTNETMONITOR_Urls: http://+:52323
      DOTNETMONITOR_DiagnosticPort__ConnectionMode: listen
      DOTNETMONITOR_DiagnosticPort__EndpointName: /diag/dotnet-monitor.sock
    command: ["collect", "--no-auth"]
    volumes:
      - "/home/ftathiago/src/rinha-backend-2024-q1/diag:/diag"
    ports:
      - "52323:52323"
      - "52325:52325"

  grafana:
    image: grafana/grafana-oss
    ports:
      - "3000:3000"
    volumes:
      # https://grafana.com/docs/grafana/latest/administration/provisioning/
      - "/home/ftathiago/src/rinha-backend-2024-q1/eng/docker/grafana/provisioning/:/etc/grafana/provisioning/"
      - "/home/ftathiago/src/rinha-backend-2024-q1/eng/docker/grafana/dashboards/:/var/lib/grafana/dashboards/"
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grafana-cli", "plugins", "ls"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s          
volumes:
  prometheus-data:

networks:
  default:
    driver: bridge
    name: rinha-nginx-2024q1